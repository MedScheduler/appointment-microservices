services:
  appointments_service:
    build:
      context: ./appointments_service
    ports:
      - "8000:8000"  # Porta mapeada para o appointments_service
    volumes:
      - ./appointments_service/app:/usr/src/app/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    depends_on:
      - mongo
      - kafka
    environment:
      - MONGO_URI=mongodb://mongo:27017/appointments_db  # Configuração de conexão com o MongoDB
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC_APPOINTMENTS=appointments
    networks:
      - app_network

  review_service:
    build:
      context: ./review_service
    ports:
      - "8003:8003"  # Porta mapeada para o review_service
    volumes:
      - ./review_service/app:/usr/src/app/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8003
    depends_on:
      - mongo
    environment:
      - MONGO_URI=mongodb://mongo:27017/review_db  # Conexão com o MongoDB para o serviço de avaliações
    networks:
      - app_network

  availability_service:
    build:
      context: ./availability_service
    ports:
      - "8004:8004"  # Porta mapeada para o availability_service
    volumes:
      - ./availability_service/app:/usr/src/app/app
    command: sh -c "uvicorn app.main:app --host 0.0.0.0 --port 8004 & sleep 10 && python app/kafka/consumer.py"
    depends_on:
      - mongo
      - kafka
    environment:
      - MONGO_URI=mongodb://mongo:27017/availability_db  # Conexão com o MongoDB para o serviço de disponibilidade
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC_APPOINTMENTS=appointments
      - PYTHONPATH=/usr/src/app
    networks:
      - app_network

  report_service:
    build:
      context: ./report_service
    ports:
      - "8005:8005"  # Porta mapeada para o report_service
    volumes:
      - ./report_service/app:/usr/src/app/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8005
    depends_on:
      - mongo
    environment:
      - MONGO_URI=mongodb://mongo:27017/report_db  # Conexão com o MongoDB para o serviço de relatórios
    networks:
      - app_network

  user_service:
    build:
      context: ./users_service
    ports:
      - "8006:8006"  # Porta mapeada para o user_service
    volumes:
      - ./users_service/src:/app/src
    command: pnpm start:dev
    depends_on:
      - mysql
    environment:
      - PORT=8006
    networks:
      - app_network

  mongo:
    image: "mongo:latest"  # Usando a imagem oficial do MongoDB
    container_name: mongo
    ports:
      - "27017:27017"  # Mapeia a porta padrão do MongoDB
    volumes:
      - mongo-data:/data/db  # Persistência dos dados do MongoDB
    environment:  # Remova as credenciais de autenticação
      - MONGO_INITDB_ROOT_USERNAME=
      - MONGO_INITDB_ROOT_PASSWORD=
    restart: always  # Reinicia o MongoDB automaticamente em caso de falha
    networks:
      - app_network

  mysql:
    image: mysql/mysql-server:latest
    container_name: mysql
    restart: always
    environment:
      MYSQL_DATABASE: 'db'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3306:3306'
    volumes:
      - mysql-volume:/var/lib/mysql
    networks:
     - app_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app_network
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
    depends_on:
      - zookeeper
    networks:
      - app_network
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - app_network

networks:
  app_network:

volumes:
  mongo-data:  # Volume para persistir os dados do MongoDB
    driver: local
  mysql-volume:
    driver: local
